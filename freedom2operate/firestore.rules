rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Allow users to read their own document and admins to read any document
      allow read: if request.auth != null && (
        userId == request.auth.uid || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      // Allow creation with required fields
      allow create: if request.auth != null && userId == request.auth.uid
        && request.resource.data.keys().hasAll(['email', 'createdAt', 'role'])
        && request.resource.data.role == 'user';
      // Allow updates to profile fields
      allow update: if request.auth != null && userId == request.auth.uid
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['displayName', 'phone', 'company', 'lastLoginAt']);
    }

    match /submissions/{submissionId} {
      // Allow users to list their own submissions, admins can list all
      allow list: if request.auth != null && (
        isAdmin() || 
        request.query.filters.hasAll([['userId', '==', request.auth.uid]])
      );
      
      // Allow users to read their own submissions, admins can read all
      allow get: if request.auth != null && 
        ((resource.data.userId == request.auth.uid && 
          (resource.data.status == 'Draft' || 
           resource.data.status == 'Submitted' || 
           resource.data.status == 'Pending Review')) || 
         isAdmin());
      
      // Allow users to create submissions if they're authenticated and the userId matches their auth id
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update their own drafts, admins can update any submission
      allow update: if request.auth != null && (
        // Admin updates
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'notes', 'updatedAt']))
        ||
        // User draft updates - allow all fields if it's a draft
        (resource.data.userId == request.auth.uid 
         && resource.data.status == 'Draft'
         && request.resource.data.status == 'Draft'
         && request.resource.data.userId == request.auth.uid
         && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'notes', 'updatedAt', 'ndaId']))
      );
      
      allow delete: if isAdmin();
    }

    match /payments/{paymentId} {
      // Allow users to list and read their own payments
      allow list: if request.auth != null && (
        isAdmin() || 
        request.query.filters.hasAll([['userId', '==', request.auth.uid]])
      );
      allow get: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow payment creation with required fields
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['amount', 'status', 'createdAt', 'submissionId']);
      
      // Allow updates only to specific fields
      allow update: if (request.auth != null 
        && resource.data.userId == request.auth.uid
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'updatedAt']))
        || isAdmin();
      
      allow delete: if isAdmin();
    }

    match /ndaAgreements/{ndaId} {
      // Allow users to list and read their own NDAs
      allow list: if request.auth != null && (
        isAdmin() || 
        (request.query.filters.hasAll([['userId', '==', request.auth.uid], ['status', '==', 'signed']]) &&
         request.query.orderBy == 'signedAt')
      );
      allow get: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow NDA creation with required fields for authenticated users
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['firstName', 'lastName', 'title', 'agreed', 'hasSignature', 'userId', 'signedAt', 'status', 'version']);
      
      // Allow users to update their own NDAs when signing, admins can update all
      allow update: if request.auth != null && (
        (resource.data.userId == request.auth.uid 
         && request.resource.data.userId == request.auth.uid)
        || isAdmin()
      );
      
      // Only admins can delete NDAs
      allow delete: if isAdmin();
    }

    match /progress/{progressId} {
      // Allow users to list and read their submission progress
      allow list: if request.auth != null && (
        isAdmin() || 
        request.query.filters.hasAll([['userId', '==', request.auth.uid]])
      );
      allow get: if request.auth != null && 
        ((resource.data.userId == request.auth.uid && 
          (resource.data.status == 'Submitted' || 
           resource.data.status == 'Pending Review')) || 
         isAdmin());
      
      // Allow progress creation with required fields
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow updates to progress tracking fields
      allow update: if request.auth != null 
        && (resource.data.userId == request.auth.uid || isAdmin())
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'currentStep', 'updatedAt', 'notes']);
      
      allow delete: if isAdmin();
    }

    match /reports/{reportId} {
      // Only admins can access reports
      allow read: if isAdmin();
      
      // Only admins can create reports
      allow create: if isAdmin() 
        && request.resource.data.keys().hasAll(['submissionId', 'type', 'createdAt', 'updatedAt', 'createdBy', 'status'])
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;
      
      // Only admins can update reports
      allow update: if isAdmin()
        && request.resource.data.updatedAt is timestamp;
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }

    match /contacts/{contactId} {
      // Allow anyone to create contact messages
      allow create: if true;
      
      // Only admins can read, update, or delete contact messages
      allow read, update, delete: if isAdmin();
    }

    match /statusUpdates/{updateId} {
      // Allow users to read their own status updates
      allow read: if request.auth != null && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      
      // Allow creation of status updates for authenticated users
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['status', 'timestamp', 'referenceNumber', 'userId']);
      
      // Only admins can update status updates
      allow update: if isAdmin();
      
      // Only admins can delete status updates
      allow delete: if isAdmin();
    }
  }
}
